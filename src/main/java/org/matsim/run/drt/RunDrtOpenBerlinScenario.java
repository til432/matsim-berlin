/* *********************************************************************** *
 * project: org.matsim.*
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 * copyright       : (C) 2017 by the members listed in the COPYING,        *
 *                   LICENSE and WARRANTY file.                            *
 * email           : info at matsim dot org                                *
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *   See also COPYING, LICENSE and WARRANTY file                           *
 *                                                                         *
 * *********************************************************************** */

package org.matsim.run.drt;

import java.util.HashSet;
import java.util.Set;

import org.apache.log4j.Logger;
import org.matsim.api.core.v01.Scenario;
import org.matsim.api.core.v01.TransportMode;
import org.matsim.api.core.v01.network.Link;
import org.matsim.contrib.av.robotaxi.fares.drt.DrtFareModule;
import org.matsim.contrib.av.robotaxi.fares.drt.DrtFaresConfigGroup;
import org.matsim.contrib.drt.routing.DrtRoute;
import org.matsim.contrib.drt.routing.DrtRouteFactory;
import org.matsim.contrib.drt.run.DrtConfigGroup;
import org.matsim.contrib.drt.run.DrtConfigs;
import org.matsim.contrib.drt.run.MultiModeDrtConfigGroup;
import org.matsim.contrib.drt.run.MultiModeDrtModule;
import org.matsim.contrib.dvrp.run.DvrpConfigGroup;
import org.matsim.contrib.dvrp.run.DvrpModule;
import org.matsim.contrib.dvrp.run.DvrpQSimComponents;
import org.matsim.core.config.CommandLine;
import org.matsim.core.config.Config;
import org.matsim.core.config.ConfigUtils;
import org.matsim.core.controler.AbstractModule;
import org.matsim.core.controler.Controler;
import org.matsim.core.network.algorithms.MultimodalNetworkCleaner;
import org.matsim.core.population.routes.RouteFactories;
import org.matsim.core.router.MainModeIdentifier;
import org.matsim.pt.transitSchedule.api.TransitSchedule;
import org.matsim.pt.transitSchedule.api.TransitStopFacility;
import org.matsim.run.RunBerlinScenario;

import ch.sbb.matsim.config.SwissRailRaptorConfigGroup;
import ch.sbb.matsim.config.SwissRailRaptorConfigGroup.IntermodalAccessEgressModeSelection;
import ch.sbb.matsim.config.SwissRailRaptorConfigGroup.IntermodalAccessEgressParameterSet;


/**
 * This class starts a simulation run with DRT.
 * 
 *  - The input DRT vehicles file specifies the number of vehicles and the vehicle capacity (a vehicle capacity of 1 means there is no ride-sharing).
 * 	- The DRT service area is set to the the inner-city Berlin area (see input shape file).
 * 	- Initial plans are not modified.
 * 
 * @author ikaddoura
 */

public final class RunDrtOpenBerlinScenario {

	private static final Logger log = Logger.getLogger(RunDrtOpenBerlinScenario.class);
	
	private static final String DRT_ACCESS_EGRESS_TO_PT_STOP_FILTER_ATTRIBUTE = "drtStopFilter";
	private static final String DRT_ACCESS_EGRESS_TO_PT_STOP_FILTER_VALUE = "station_S/U/RE/RB_drtServiceArea";

	public static void main(String[] args) throws CommandLine.ConfigurationException {
		Config config = prepareConfig( args ) ;
		Scenario scenario = prepareScenario( config ) ;
		Controler controler = prepareControler( scenario ) ;
		controler.run() ;
	}
	
	static Controler prepareControler( Scenario scenario ) {

		Controler controler = RunBerlinScenario.prepareControler( scenario ) ;
		
		// drt + dvrp module
		controler.addOverridingModule(new MultiModeDrtModule());
		controler.addOverridingModule(new DvrpModule());
		controler.configureQSimComponents(DvrpQSimComponents.activateAllModes(MultiModeDrtConfigGroup.get(controler.getConfig())));
		
		controler.addOverridingModule(new AbstractModule() {
			
			@Override
			public void install() {
				// use a main mode identifier which knows how to handle intermodal trips generated by the used sbb pt raptor router
				// the SwissRailRaptor already binds its IntermodalAwareRouterModeIdentifier, however drt obviuosly replaces it
				// with its own implementation
				// So we need our own main mode indentifier which replaces both :-(
				bind(MainModeIdentifier.class).to(OpenBerlinIntermodalPtDrtRouterModeIdentifier.class);
			}
		});

		// Add drt-specific fare module
		controler.addOverridingModule(new DrtFareModule());
		// yyyy there is fareSModule (with S) in config. ?!?!  kai, jul'19

		return controler;
	}
	
	static Scenario prepareScenario( Config config ) {

		Scenario scenario = RunBerlinScenario.prepareScenario( config );

		RouteFactories routeFactories = scenario.getPopulation().getFactory().getRouteFactories();
		routeFactories.setRouteFactory(DrtRoute.class, new DrtRouteFactory());

		for (DrtConfigGroup drtCfg : MultiModeDrtConfigGroup.get(config).getModalElements()) {
			
			String drtServiceAreaShapeFile = drtCfg.getDrtServiceAreaShapeFile();
			if (drtServiceAreaShapeFile != null && !drtServiceAreaShapeFile.equals("") && !drtServiceAreaShapeFile.equals("null")) {
				addDRTmode(scenario, drtCfg.getMode(), drtServiceAreaShapeFile);
				tagTransitStopsInServiceArea(scenario.getTransitSchedule(), 
						DRT_ACCESS_EGRESS_TO_PT_STOP_FILTER_ATTRIBUTE, DRT_ACCESS_EGRESS_TO_PT_STOP_FILTER_VALUE, 
						drtServiceAreaShapeFile,
						"stopFilter", "station_S/U/RE/RB",
						// some S+U stations are located slightly outside the shp File, e.g. U7 Neukoelln, U8
						// Hermannstr., so allow buffer around the shape.
						// This does not mean that a drt vehicle can pick the passenger up outside the service area,
						// rather the passenger has to walk the last few meters from the drt drop off to the station.
						200.0); // TODO: Use constant in RunGTFS2MATSimOpenBerlin and here? Or better some kind of set available pt modes?
			}
		}
		
		return scenario;
	}
	
	static Config prepareConfig( String [] args ) {

		Config config = null ;

		if ( args.length != 0 ){
			config = RunBerlinScenario.prepareConfig( args, new DvrpConfigGroup(), new MultiModeDrtConfigGroup(), new DrtFaresConfigGroup()  ) ;
		} else {
			config = RunBerlinScenario.prepareConfig( new String [] {"scenarios/berlin-v5.5-1pct/input/drt/berlin-drt-Berlkoenig-v5.5-1pct.config.xml"}, new DvrpConfigGroup(), new MultiModeDrtConfigGroup(), new DrtFaresConfigGroup() ) ;
		}
		
		// switch off pt vehicle simulation: very slow, because also switches from Raptor to the old pt router
//		config.transit().setUsingTransitInMobsim(false);

		DrtConfigs.adjustMultiModeDrtConfig(MultiModeDrtConfigGroup.get(config), config.planCalcScore(), config.plansCalcRoute());
				
		// intermodal routing pt+drt(/walk)
		{
			SwissRailRaptorConfigGroup configRaptor = ConfigUtils.addOrGetModule(config, SwissRailRaptorConfigGroup.class);

			configRaptor.setUseIntermodalAccessEgress(true);
			configRaptor.setIntermodalAccessEgressModeSelection(IntermodalAccessEgressModeSelection.RandomSelectOneModePerRoutingRequestAndDirection);
			{
				// walk
				IntermodalAccessEgressParameterSet paramSetWalk = new IntermodalAccessEgressParameterSet();
				// paramSetXxx.setMode( TransportMode.walk ); // this does not work because sbb raptor treats it in a special way
				paramSetWalk.setMode(TransportMode.non_network_walk);
				paramSetWalk.setMaxRadius(100000);
				paramSetWalk.setInitialSearchRadius(1500);
				paramSetWalk.setSearchExtensionRadius(1000);
				configRaptor.addIntermodalAccessEgress(paramSetWalk);
				// (in principle, walk as alternative to drt will not work, since drt is always
				// faster. Need to give the ASC to the router! However, with
				// the reduced drt network we should be able to see differentiation.)
			}
			{
				// drt
				IntermodalAccessEgressParameterSet paramSetDrt = new IntermodalAccessEgressParameterSet();
				paramSetDrt.setMode(TransportMode.drt);
				/* Berlkoenig service area has a maximum diameter of ca. 11km, access trips over 12km don't make sense.
				 * Prohibit them to save computation time. 
				 * (RandomAccessEgressModeRaptorStopFinder will try again with walk, the other available access/egress mode)
				 * maybe we should restrict even further, see comment below for InitialSearchRadius.
				 */
				paramSetDrt.setMaxRadius(12000); 
				/* If more than 1 transit stop is found in the initial search radius, the raptor stop finder will stop to search
				 * more distant transit stops.
				 * Setting setInitialSearchRadius(12000) will allow for crossing the whole Berlkoenig area with drt as 
				 * access/egress mode to pt. This way we are on the safe side and do not exclude any theoretically possible 
				 * drt ride.
				 * Unfortunately that means that for a route from Alexanderplatz to Friedrichstrasse the pt router basically has 
				 * to route from all transit stops in the city center of Berlin to all transit stops in the city center of Berlin,
				 * because it has to consider all transit stops in that 12 km radius from Alexanderplatz and Friedrichstrasse, 
				 * respectively. This slows down pt routing enormously. 
				 * To speed up there are two options:
				 *  - restrict the set of transit stops accessible by drt using a stop filter attribute, e.g. only RE+S+U-Bahn
				 *  - reduce the initial search radius (and thereby effectively prohibit drt rides longer than that initial
				 *    search radius for access/egress to pt, because there is always more than 1 transit stop in that radius). 
				 *    
				 * For 2528 agents and no stop filter attribute PlanRouter in iteration 1 took 
				 *  - ca. 1 min at InitialSearchRadius 3 km
				 *  - but 53 min at InitialSearchRadius 12km
				 * 
				 * So we have to make use of the speed up options (and exclude theoretically possible but unlikely drt trips).
				 *  - gleich aug'19
				 */
				paramSetDrt.setInitialSearchRadius(3000); 
				paramSetDrt.setSearchExtensionRadius(1000);
				paramSetDrt.setStopFilterAttribute(DRT_ACCESS_EGRESS_TO_PT_STOP_FILTER_ATTRIBUTE);
				paramSetDrt.setStopFilterValue(DRT_ACCESS_EGRESS_TO_PT_STOP_FILTER_VALUE);
				configRaptor.addIntermodalAccessEgress(paramSetDrt);
			}
		}

		return config ;
	}
	
	public static void addDRTmode(Scenario scenario, String drtNetworkMode, String drtServiceAreaShapeFile) {
		
		log.info("Adjusting network...");
		
		BerlinShpUtils shpUtils = new BerlinShpUtils( drtServiceAreaShapeFile );

		int counter = 0;
		int counterInside = 0;
		int counterOutside = 0;
		for (Link link : scenario.getNetwork().getLinks().values()) {
			if (counter % 10000 == 0)
				log.info("link #" + counter);
			counter++;
			if (link.getAllowedModes().contains(TransportMode.car)) {
				if (shpUtils.isCoordInDrtServiceArea(link.getFromNode().getCoord())
						|| shpUtils.isCoordInDrtServiceArea(link.getToNode().getCoord())) {
					Set<String> allowedModes = new HashSet<>(link.getAllowedModes());
					
					allowedModes.add(drtNetworkMode);

					link.setAllowedModes(allowedModes);
					counterInside++;
				} else {
					counterOutside++;
				}

			} else if (link.getAllowedModes().contains(TransportMode.pt)) {
				// skip pt links
			} else {
				throw new RuntimeException("Aborting...");
			}
		}
		
		log.info("Total links: " + counter);
		log.info("Total links inside service area: " + counterInside);
		log.info("Total links outside service area: " + counterOutside);
		
		Set<String> modes = new HashSet<>();
		modes.add(drtNetworkMode);
		new MultimodalNetworkCleaner(scenario.getNetwork()).run(modes);
	}
	
	private static void tagTransitStopsInServiceArea(TransitSchedule transitSchedule, 
			String newAttributeName, String newAttributeValue, 
			String drtServiceAreaShapeFile, 
			String oldFilterAttribute, String oldFilterValue,
			double bufferAroundServiceArea) {
		BerlinShpUtils shpUtils = new BerlinShpUtils( drtServiceAreaShapeFile );
		for (TransitStopFacility stop: transitSchedule.getFacilities().values()) {
			if (stop.getAttributes().getAttribute(oldFilterAttribute) != null) {
				if (stop.getAttributes().getAttribute(oldFilterAttribute).equals(oldFilterValue)) {
					if (shpUtils.isCoordInDrtServiceAreaWithBuffer(stop.getCoord(), bufferAroundServiceArea)) {
						stop.getAttributes().putAttribute(newAttributeName, newAttributeValue);
					}
				}
			}
		}
	}

}

